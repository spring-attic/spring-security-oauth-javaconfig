
buildscript {
    repositories {
        maven { url 'https://repo.springsource.org/plugins-release' }
    }
    dependencies {
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.2'
    }
}

ext.aspectjVersion  = "1.7.1"
ext.slf4jVersion = '1.6.3'
ext.jettyVersion = '7.1.6.v20100715'
ext.springVersion = "3.2.3.RELEASE"
ext.springSecurityVersion = '3.2.0.CI-SNAPSHOT'
ext.springOauthVersion = "1.0.4.RELEASE"
ext.apacheDsVersion = '1.5.5'
ext.groovyVersion = "2.0.6"

ext.apacheDsDependencies = ["org.apache.directory.server:apacheds-core:$apacheDsVersion",
            "org.apache.directory.server:apacheds-core-entry:$apacheDsVersion",
            "org.apache.directory.server:apacheds-protocol-shared:$apacheDsVersion",
            "org.apache.directory.server:apacheds-protocol-ldap:$apacheDsVersion",
            "org.apache.directory.server:apacheds-server-jndi:$apacheDsVersion",
            "org.apache.directory.shared:shared-ldap:0.9.15"]

configure(subprojects) { p->
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'eclipse-wtp'

    apply from:  "${rootProject.projectDir}/publish-maven.gradle"

    group = 'org.springframework.security'

    [compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:none']

    test.systemProperty("java.awt.headless", "true")

    sourceCompatibility=1.5
    targetCompatibility=1.5

    repositories {
        maven { url "https://repo.springsource.org/libs-snapshot" }
        maven { url 'https://repo.maven.apache.org/maven2/' }
    }

    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'org.springframework') {
                details.useVersion springVersion
            }
            if (details.requested.group == 'org.springframework.security' && details.requested.version.endsWith(".RELEASE")) {
                details.useVersion springSecurityVersion
            }
            if (details.requested.group == 'org.slf4j') {
                details.useVersion slf4jVersion
            }
        }
    }

    configurations {
        jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
    }

    dependencies {
        jacoco group: "org.jacoco", name: "org.jacoco.agent", version: "0.6.2.201302030002", classifier: "runtime"

        provided 'javax.servlet:javax.servlet-api:3.0.1'

        testCompile "org.springframework:spring-test:$springVersion",
                    "org.codehaus.groovy:groovy:$groovyVersion",
                    "org.easytesting:fest-assert:1.4",
                    "junit:junit:4.8",
                    "org.spockframework:spock-core:0.7-groovy-2.0",
                    "org.spockframework:spock-spring:0.7-groovy-2.0"
    }

    jar {
        manifest.attributes['Implementation-Title'] = p.name
        manifest.attributes['Implementation-Version'] = p.version
    }

    javadoc {
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.header = project.name
    }

    task sourcesJar(type: Jar, dependsOn:classes) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    test {
        systemProperties['apacheDSWorkDir'] = "${buildDir}/apacheDSWork"
    }
}

configure(rootProject) {
    apply plugin: 'sonar-runner'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'java'

    configurations.archives.artifacts.clear()

    sonarRunner {
        sonarProperties {
            property "sonar.java.coveragePlugin", "jacoco"
            property "sonar.jacoco.reportPath", "${buildDir.name}/jacoco.exec"
            property "sonar.links.homepage", 'https://github.com/SpringSource/spring-security-oauth2-javaconfig'
            property "sonar.links.ci", 'https://build.springsource.org/browse/SEC-JAVACONFIG'
            property "sonar.links.issue", 'https://github.com/SpringSource/spring-security-oauth2-javaconfig/issues'
            property "sonar.links.scm", 'https://github.com/SpringSource/spring-security-oauth2-javaconfig'
            property "sonar.links.scm_dev", 'https://github.com/SpringSource/spring-security-oauth2-javaconfig.git'
            property "sonar.java.coveragePlugin", "jacoco"
        }
    }
    task docsZip(type: Zip) {
        group = "Distribution"
        baseName = "spring-security-oauth2-javaconfig"
        classifier = "docs"
        description = "Builds -${classifier} archive containing api and reference " +
            "for deployment at https://docs.spring.io/spring-security-oauth2-javaconfig/docs."

        from (project(":spring-security-oauth2-javaconfig").javadoc) {
            into "api-reference"
        }
    }

    task distZip(type: Zip, dependsOn: [docsZip]) {
        group = "Distribution"
        baseName = "spring-security-oauth2-javaconfig"
        classifier = "dist"
        description = "Builds -${classifier} archive, containing all jars and docs, " +
                    "suitable for community download page."

        ext.baseDir = "${baseName}-${project.version}";

        from(zipTree(docsZip.archivePath)) {
            into "${baseDir}/docs"
        }

        [project(":spring-security-oauth2-javaconfig")].each { subproject ->
            into ("${baseDir}/libs") {
                from subproject.jar
                if (subproject.tasks.findByPath("sourcesJar")) {
                    from subproject.sourcesJar
                }
                if (subproject.tasks.findByPath("javadocJar")) {
                    from subproject.javadocJar
                }
            }
        }
    }

    artifacts {
        archives docsZip
        archives distZip
    }
}

def samples = subprojects.findAll { project -> project.path.contains('samples') }

configure(samples) {
    project.tasks.findByPath('artifactoryPublish')?.enabled = false
}

def warSamples = subprojects.findAll { project -> project.path.contains('samples')}


configure(warSamples) {
    apply plugin: 'war'

    sonarRunner {
        skipProject = true
    }

    configurations {
        integrationTestCompile {
            extendsFrom testCompile
        }
        integrationTestRuntime {
            extendsFrom integrationTestCompile, testRuntime
        }
        ['commons-logging','log4j'].each { groupName -> all*.exclude group: groupName }
    }

    sourceSets {
        integrationTest {
            groovy.srcDir file('src/it/groovy')
            resources.srcDir file('src/it/resources')
            compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.integrationTestCompile
            runtimeClasspath = output + compileClasspath + configurations.integrationTestRuntime
        }
    }

    eclipse {
        classpath.plusConfigurations += configurations.integrationTestRuntime
        wtp {
            component {
                contextPath = 'sample'
            }
        }
    }

    dependencies {

        providedCompile "javax.servlet:javax.servlet-api:3.0.1"

        compile project(":spring-security-oauth2-javaconfig"),
                "org.springframework.security:spring-security-core:$springSecurityVersion",
                "org.springframework.security:spring-security-web:$springSecurityVersion",
                "org.springframework:spring-webmvc:$springVersion",
                "org.springframework:spring-jdbc:$springVersion",
                "org.slf4j:slf4j-api:$slf4jVersion",
                "org.slf4j:log4j-over-slf4j:$slf4jVersion",
                "org.slf4j:jul-to-slf4j:$slf4jVersion",
                "org.slf4j:jcl-over-slf4j:$slf4jVersion",
                "javax.servlet:jstl:1.2",
                "javax.validation:validation-api:1.0.0.GA",
                "org.hibernate:hibernate-validator:4.2.0.Final"

        runtime "opensymphony:sitemesh:2.4.2",
                'cglib:cglib-nodep:2.2.2',
                'ch.qos.logback:logback-classic:0.9.30'
    }
}

task wrapper(type: Wrapper) {
    description = 'Generates gradlew[.bat] scripts'
    gradleVersion = '1.6'
}
